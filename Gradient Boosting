import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report

data = {
    'Nitrogen': [100, 150, 200, 250, 300, 350],
    'Phosphorus': [50, 60, 70, 80, 90, 100],
    'Potassium': [200, 250, 300, 350, 400, 450],
    'Crop': ['Wheat', 'Corn', 'Soybean', 'Barley', 'Oats', 'Rice']
}

df = pd.DataFrame(data)


X = df[['Nitrogen', 'Phosphorus', 'Potassium']]
y = df['Crop']


le = LabelEncoder()
y_encoded = le.fit_transform(y)


X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


model = GradientBoostingClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)


y_pred = model.predict(X_test_scaled)

def recommend_crop(nitrogen, phosphorus, potassium):

    input_data = pd.DataFrame([[nitrogen, phosphorus, potassium]], columns=['Nitrogen', 'Phosphorus', 'Potassium'])
    input_scaled = scaler.transform(input_data)
    prediction_encoded = model.predict(input_scaled)
    return le.inverse_transform(prediction_encoded)[0]



nitrogen = 300
phosphorus = 100
potassium = 450
recommended_crop = recommend_crop(nitrogen, phosphorus, potassium)
print(f"Recommended Crop: {recommended_crop}")
